<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharp.Meta</name>
    </assembly>
    <members>
        <member name="T:CSharp.Meta.Decorator">
            <summary>
            Base class for all decorators which can be applied to member declarations in order to weave aspects around them at compile time.
            </summary>
        </member>
        <member name="M:CSharp.Meta.Decorator.DecorateMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            When overridden in a derived class, this decorator method's body is used to weave aspects around method declarations.
            </summary>
            <param name="method">The decorated method's runtime reflection information.</param>
            <param name="thisObject">A reference to the decorated method's this reference, if it is an instance method.</param>
            <param name="arguments">A list of all arguments passed to the decorated method in its invocation.</param>
            <returns>The value which should be returned by the decorated method at the end of its execution.</returns>
        </member>
        <member name="T:CSharp.Meta.MetaException">
            <summary>
            The exception that is thrown during the compilation of metaprogramming features.
            </summary>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.AddTrait(System.Type,System.Type)">
            <summary>
            Imports a trait into a host type. Can only be used in a metaclass code and the host type should be the target type of the metaclass application.
            </summary>
            <param name="hostType">The host type into which the trait will be imported.</param>
            <param name="traitType">An arbitrary trait type.</param>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.AddTrait``1(System.Type)">
            <summary>
            Imports a trait into a host type. Can only be used in a metaclass code and the host type should be the target type of the metaclass application.
            </summary>
            <typeparam name="T">An arbitrary trait type.</typeparam>
            <param name="hostType">The host type into which the trait will be imported.</param>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.ApplyDecorator(System.Reflection.MemberInfo,CSharp.Meta.Decorator)">
            <summary>
            Applies a decorator to a type member. Can only be used in a metaclass code and the member should be declared by the target type of the metaclass application.
            </summary>
            <param name="member">A member's run-time reflection information.</param>
            <param name="decorator">An arbitrary decorator instance.</param>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.CloneArguments(System.Object[])">
            <summary>
            Clones an array of method arguments. The decorator method type checker considers the result of this method a proper argument array for the method.
            </summary>
            <param name="arguments">A source array of method arguments.</param>
            <returns>A method arguments array containing the same argument values as the source argument array.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="arguments"/> is null.
            </exception>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.CloneArgumentsToObjectArray(System.Object[])">
            <summary>
            Clones an array of method arguments. The decorator method type checker considers the result of this method a simple array of arbitrary values.
            </summary>
            <param name="arguments">A source array of method arguments.</param>
            <returns>An array containing the same elements as the source argument array.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="arguments"/> is null.
            </exception>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.DefaultValue(System.Type)">
            <summary>
            Returns the default value for a type. Can be used inside decorator methods to satisfy special type safety constraints.
            </summary>
            <param name="type">An arbitrary type.</param>
            <returns></returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.IsImplicitlyDeclared(System.Reflection.MemberInfo)">
            <summary>
            Checks if a type member is implicitly generated by the compiler. Can only be used in metaclass code.
            </summary>
            <param name="member">A member's run-time reflection information.</param>
            <returns>True if the member is generated implicitly by the compiler.</returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.IsIterator(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is an iterator. Can only be used in metaclass code.
            </summary>
            <param name="method">A method's run-time reflection information.</param>
            <returns>True if the method is an iterator.</returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.IsPropertyAccessor(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is a property accessor.
            </summary>
            <param name="method">A method's run-time reflection information.</param>
            <returns>True if the method is a property accessor.</returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.IsReadOnly(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether a property is read-only or not.
            </summary>
            <param name="property">A property's run-time reflection information.</param>
            <returns>True if the propert does not have a setter.</returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.IsWriteOnly(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether a property is write-only or not.
            </summary>
            <param name="property">A property's run-time reflection information.</param>
            <returns>True if the propert does not have a getter.</returns>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.ParameterType(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Returns the type of a method's parameter. Used to introduce argument subtyping assertions in decorator method type checking.
            </summary>
            <param name="method">A method's run-time reflection information.</param>
            <param name="parameterIndex">A valid parameter index for the method.</param>
            <returns>The specified parameter's type.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="parameterIndex"/> is outside the range of method parameters.
            </exception>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.ParameterType(System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Returns the type of a property's parameter. Used to introduce argument subtyping assertions in decorator method type checking.
            </summary>
            <param name="property">A property's run-time reflection information.</param>
            <param name="parameterIndex">A valid parameter index for the property.</param>
            <returns>The specified parameter's type.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="property"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="parameterIndex"/> is outside the range of property parameters.
            </exception>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.ThisObjectType(System.Reflection.MethodBase)">
            <summary>
            Returns the type of the this-reference of a method, or typeof(void) if the method is static. Used to introduce this-reference subtyping assertions in
            decorator method type checking.
            </summary>
            <param name="method">A method's run-time reflection information.</param>
            <returns>The type of the this-reference of the method, or typeof(void) if it is static.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:CSharp.Meta.MetaPrimitives.ThisObjectType(System.Reflection.PropertyInfo)">
            <summary>
            Returns the type of the this-reference of a property, or typeof(void) if the property is static. Used to introduce this-reference subtyping assertions in
            decorator method type checking.
            </summary>
            <param name="property">A property's run-time reflection information.</param>
            <returns>The type of the this-reference of the property, or typeof(void) if it is static.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="property"/> is null.
            </exception>
        </member>
    </members>
</doc>
